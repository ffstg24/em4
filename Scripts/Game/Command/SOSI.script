const char SOUND_TEST[] = "mod:Audio\FX\Sondersignal\test.wav";

object SOSISiren : CommandScript
{
	SOSISiren()
	{
		SetIcon("sosi");
 		SetRestrictions(RESTRICT_SELFEXECUTE);
	}
	
	bool CheckPossible(GameObject *Caller){return true;}
	
	bool CheckTarget(GameObject *Caller, Actor *Target, int childID){return Caller->GetID()==Target->GetID();}
	
	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{	
		Vehicle v(Caller);
		if(v.HasCommand("DUMMYSirenOn"))
			Caller->PushActionExecuteCommand(ACTION_APPEND, "SOSISirenOff", Caller, 0, false);
		else Caller->PushActionExecuteCommand(ACTION_APPEND, "SOSISirenOn", Caller, 0, false);
	}
};

object SOSISirenOn : CommandScript
{
	SOSISirenOn(){}
	bool CheckPossible(GameObject *Caller){return false;}	
	bool CheckTarget(GameObject *Caller, Actor *Target, int childID){return false;}
	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		System::Log("Log 4.1");
		Vehicle v(Caller);
		v.PushActionExecuteCommand(ACTION_APPEND, "SOSIBluelightsOn", Caller, 0, false);

		char vname[] = Caller->GetName();
		char path[255];
		System::Log("Log 4.2");
		System::Log(vname);
		switch(vname)
		{

		case "stg11":
			path = SOUND_TEST;
			System::Log("Log 4.21");
			break;

		}
		System::Log("Log 4.3");
		int soundID=Audio::PlaySample3D(path, v.GetPosition(), true);
		GameObject ob=Game::CreateObject("mod:Prototypes/Objects/Misc/empty.e4p", "sound");
		ob.Hide();
		ob.SetUserData(v.GetID());
		ob.PushActionExecuteCommand(ACTION_NEWLIST,"SOSIUpdatePos",&v,soundID,false);
		v.SetUserData(soundID);
		System::Log("Log 4.4");
		v.AssignCommand("DUMMYSirenOn");
		System::Log("Log 4.5");
	}
};

object SOSISirenOff : CommandScript
{
	SOSISirenOff(){}
	bool CheckPossible(GameObject *Caller){return false;}	
	bool CheckTarget(GameObject *Caller, Actor *Target, int childID){return false;}
	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		Vehicle v(Caller);
		v.SetUserData(0);
		Audio::StopSample(v.GetUserData());
		GameObjectList obj=Game::GetGameObjects("sound");
		for(int i=0;i<obj.GetNumObjects();i++)
		{
			if(obj.GetObject(i)->GetUserData()==v.GetID())
				obj.GetObject(i)->PushActionDeleteOwner(ACTION_NEWLIST);
		}
		v.RemoveCommand("DUMMYSirenOn");
	}
};

object SOSIUpdatePos : CommandScript
{
	SOSIUpdatePos(){}
	
	bool CheckPossible(GameObject *Caller)
	{
		return true;
	}
	
	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{
		return true;
	}
	
	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{	
		Vehicle v(Target);
		
		if(v.IsValid()&&v.GetEnergy()>0&&Audio::IsPlaying(childID)&&v.IsBlueLightEnabled()&&(v.IsCurrentAction("EActionMove")||v.IsMoving()||v.GetNumActions()>0))
		{
			GameObject ob(Caller);
			Audio::UpdatePos(childID, v.GetPosition(), true);
			v.SetUserData(childID);
			ob.PushActionExecuteCommand(ACTION_NEWLIST,"folgesosi",Target,childID,false);
		}
		else
		{
			v.SetUserData(0);
			Audio::StopSample(childID);
			Caller->PushActionDeleteOwner(ACTION_NEWLIST);
		}
	}
};

object SOSIBluelights : CommandScript
{
	SOSIBluelights()
	{
		SetIcon("bluelights");
		SetRestrictions(RESTRICT_SELFEXECUTE);
	}
	bool CheckPossible(GameObject *Caller)
	{
		if(Caller->GetType() == ACTOR_VEHICLE)
			return true;
		return false;
	}	
	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{
		if(Target->GetID() == Caller->GetID())
			return true;
		return false;
	}
	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		if(Target->HasCommand("DUMMYBluelightsOn"))
		{
			Caller->PushActionExecuteCommand(ACTION_APPEND, "SOSISirenOff", Target, 0, false);
			Caller->PushActionExecuteCommand(ACTION_APPEND, "SOSIBluelightsOff", Target, 0, false);
		}
		else
		{
			Caller->PushActionExecuteCommand(ACTION_APPEND, "SOSIBluelightsOn", Target, 0, false);
		}
	}
};

object SOSIBluelightsOn : CommandScript
{
	SOSIBluelightsOn()
	{
		SetRestrictions(RESTRICT_SELFEXECUTE);
	}
	bool CheckPossible(GameObject *Caller)
	{
		if(Caller->GetType() == ACTOR_VEHICLE)
			return true;
		System::Log("Error 1");
		return false;
	}	
	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{
		if(Target->GetID() == Caller->GetID())
			return true;
		System::Log("Error 2");
		return false;
	}
	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		System::Log("Log 1.1");
		Vehicle v(Caller);
		v.EnableBlueLights(true);
		v.AssignCommand("DUMMYBluelightsOn");
	}
};

object SOSIBluelightsOff : CommandScript
{
	SOSIBluelightsOff()
	{
		SetRestrictions(RESTRICT_SELFEXECUTE);
	}
	bool CheckPossible(GameObject *Caller)
	{
		if(Caller->GetType() == ACTOR_VEHICLE)
			return true;
		return false;
	}	
	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{
		if(Target->GetID() == Caller->GetID())
			return true;
		return false;
	}
	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		Vehicle v(Caller);
		v.EnableBlueLights(false);
		v.RemoveCommand("DUMMYBluelightsOn");
	}
};
